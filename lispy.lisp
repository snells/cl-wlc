(in-package :cl-wlc)
(defun ref-handle (h &optional (offset 0))
  (mem-aref h 'wlc-handle offset))
(defun pt-handle (h &optional (offset 0))
  (mem-aptr h 'wlc-handle offset))

(defun exec (name)
  (cl-exec name))
  ;(c-wlc-exec "weston-terminal" (make-pointer 0)))

(defun ref-wlc-modifiers (pt)
  (list (struct-val pt 'wlc-modifiers 'leds)
	(struct-val pt 'wlc-modifiers 'mods)))

(defun ref-wlc-size (pt)
  (list (struct-val pt 'wlc-size 'w)
	(struct-val pt 'wlc-size 'h)))
(defun (setf ref-wlc-size) (val pt)
    (format out "setting size to ~a~%" val)
  (set-struct-val pt 'wlc-size 'w (car val))
  (set-struct-val pt 'wlc-size 'h (cadr val)))

(defun ref-wlc-origin (pt)
  (list (struct-val pt 'wlc-origin 'x)
	(struct-val pt 'wlc-origin 'y)))
(defun (setf ref-wlc-origin) (val pt)
  (format out "setting origin to ~a~%" val)
  (set-struct-val pt 'wlc-origin 'x (car val))
  (set-struct-val pt 'wlc-origin 'y (cadr val)))
(defun ref-wlc-geometry (pt)
  (list (ref-wlc-origin (struct-pt pt 'wlc-geometry 'origin))
	(ref-wlc-size (struct-pt pt 'wlc-geometry 'size))))
;(defun (setf ref-wlc-geometry) (val pt)
;  (let* ((g pt)
; 	 (o (setf (ref-wlc-origin (struct-pt g 'wlc-geometry 'origin)) (car val)))
; 	 (s (setf (ref-wlc-size (struct-pt g 'wlc-geometry 'size)) (cadr val))))
;    (list o s)))

(defun (setf ref-wlc-geometry) (val pt)
  (let* ((g pt)
	 (origin (car val))
	 (size (cadr val))
	 (o (struct-pt g 'wlc-geometry 'origin))
	 (s (struct-pt g 'wlc-geometry 'size)))
    (set-struct-val o 'wlc-origin 'x (car origin))
    (set-struct-val o 'wlc-origin 'y (cadr origin))
    (set-struct-val s 'wlc-size 'w (car size))
    (set-struct-val s 'wlc-size 'h (cadr size))))



(defun geometry-size (lst)
  (cadr lst))
(defun (setf geometry-size) (val lst)
  (setf (cadr lst) val))
(defun geometry-origin (lst)
  (car lst))
(defun (setf geometry-origin) (val lst)
  (setf (car lst) val))

(defun parse-mod-bit (pt)
  (struct-val pt 'wlc-modifiers 'mods))


